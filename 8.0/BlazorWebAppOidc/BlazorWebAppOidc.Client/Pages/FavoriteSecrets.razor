@page "/favorite-secrets"
@using BlazorWebAppOidc.Client.Secrets
@using Microsoft.AspNetCore.Authorization

@attribute [Authorize]
@implements IDisposable
@inject PersistentComponentState ApplicationState
@inject ISecretsGetter SecretsGetter


<PageTitle>Favorite Secrets</PageTitle>

<h1>Favorite Secrets</h1>

@if (secrets == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Key Vault Name</th>
                <th>Secret Name</th>
                <th>Secret Value</th>
                <th>Expiration Date</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var secret in secrets)
            {
                <tr>
                    <td>@secret.KeyVaultName</td>
                    <td>@secret.SecretName</td>
                    <td>@secret.SecretValue</td>
                    <td>@secret.ExpirationDate.ToShortDateString()</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private IEnumerable<Secret>? secrets;
    private PersistingComponentStateSubscription persistingSubscription;

    protected override async Task OnInitializedAsync()
    {
        // try
        // {
        //     using var response = await downstreamWebApi.CallWebApiForUserAsync("GraphApi").ConfigureAwait(false);
        //     response.EnsureSuccessStatusCode();
        //     graphApiResponse = await response.Content.ReadFromJsonAsync<JsonDocument>().ConfigureAwait(false);
        // }
        // catch (Exception ex)
        // {
        //     ConsentHandler.HandleException(ex);
        // }


        persistingSubscription = ApplicationState.RegisterOnPersisting(PersistData);

        if (!ApplicationState.TryTakeFromJson<IEnumerable<Secret>>(nameof(secrets), out var restoredData))
        {
            secrets = await SecretsGetter.GetSecretsAsync();
        }
        else
        {
            secrets = restoredData!;
        }
    }

    private Task PersistData()
    {
        ApplicationState.PersistAsJson(nameof(secrets), secrets);

        return Task.CompletedTask;
    }

    void IDisposable.Dispose() => persistingSubscription.Dispose();
}
